[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
  {% set TARGET = params.TARGET_TEMP | default(100) | float %}
  {% set DURATION = (params.DURATION_MIN | default(60) | int) * 60 %} ## minutes to seconds

  {% set x_heatsoak = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_heatsoak = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set z_heatsoak = 70 %}

  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

  ;; set led status
  _STATUS_PREPARING  

  ;; fire up the heater
  SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

  ;; run fans to circulate air
  M106 S255
  SET_FAN_SPEED FAN=nevermore SPEED=1

  ;; put the bed and nozzle where they're a safe distance apart
  _HOMED
  G0 X{x_heatsoak} Y{y_heatsoak} F5000
  G0 Z{z_heatsoak} F500
  M84 ;; turn off steppers

  UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
  {% set stage = heat_soak.stage %}

  {% if stage in ["soaking", "heating"] %}  
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
  {% else %}
    M117 Nothing to cancel
  {% endif %}

######################################################################################
## Callbacks
######################################################################################

[gcode_macro _HEAT_SOAK_CANCELED]
description: called when heat soak is cancelled
gcode:
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
  {% set total_time_elapsed = heat_soak.total_time_elapsed %}
  TURN_OFF_HEATERS
  M107 ; turn off fan
  M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }

[gcode_macro _HEAT_SOAK_COMPLETED]
description: called when heat soak is completed
gcode:
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
  {% set total_time_elapsed = heat_soak.total_time_elapsed %}
  M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
  M118 Heatsoaking is completed

[gcode_macro _HEAT_SOAK_SOAKING]
description: called when heating is completed and soaking started
gcode:
  ; slow down fans to save their resource
  SET_FAN_SPEED FAN=nevermore SPEED=0.5
  ; switch led status
  _STATUS_HEATSOAKING  

######################################################################################
## Event loop
######################################################################################

[delayed_gcode heat_soaker]
gcode:
  ## debug
  # { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
  {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

  ## update total time elapsed
  {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

  {% set stage = heat_soak.stage %}
  {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
      {% set stage = "soaking" %}
      SET_FAN_SPEED FAN=nevermore SPEED=0.5
  {% endif %}

  {% if stage == "soaking" %}
    ## update soak countdown
    {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

    {% if soak_time_remaining == 0 %}
      {% set stage = "done" %}
    {% endif %}
  {% endif %}

  SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

  {% if stage in ("done", "cancel") %}
    
    ## reset all state vars, except stage, which may be queried via the api
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% if stage == "cancel" %}
      {% set stage = "done" %}
      _HEAT_SOAK_CANCELED
    {% else %}
      _HEAT_SOAK_COMPLETED
    {% endif %}

  {% else %}

      {% if total_time_elapsed % 90 == 0 %}
          ## output status periodically
          {% if stage == "heating" %}
              M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
          {% elif stage == "soaking" %}
              M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
          {% endif %}
      {% endif %}

      ## trigger ourselves again
      UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

      ## dwell for 1ms to prevent from going idle
      G4 P1

  {% endif %}

  